apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

// Added by Omar - Start
//apply plugin: 'com.google.gms.google-services'
//apply plugin: 'com.google.firebase.crashlytics'
// Added by Omar - End

android {
    compileSdkVersion 32
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        dataBinding true
        viewBinding true
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    Properties versionProps = new Properties()
    def versionPropsFile = file('version.properties')

    //Create a version properties file and add required properties with default values
    if (!versionPropsFile.exists()) {
        versionProps['VERSION_PATCH'] = "0"
        versionProps['VERSION_BUILD'] = "0"
        versionProps['VERSION_NUMBER'] = "0"

        Writer writer = new FileWriter(versionPropsFile, false)
        versionProps.store(versionPropsFile.newWriter(), null)
    }

    // Read existing
    if (versionPropsFile.canRead()) {
        versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def value = 0
        def versionType = "D"


        def runTasks = gradle.startParameter.taskNames
        if ('assemble' in runTasks || ':app:assembleRelease' in runTasks || 'aR' in runTasks) {
            value = 1
            versionType = "R"
        }

        def versionNumber = 1
        //  def versionMinor = 0
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + value
        def versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
        //def versionNumber = versionProps['VERSION_NUMBER'].toInteger() + value

        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps['VERSION_NUMBER'] = versionNumber.toString()

        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "edu.aku.dmu.quasi_experimental"
            versionCode versionBuild
            versionName "${versionNumber}.${versionPatch}${versionType}"
            minSdkVersion 22
            targetSdkVersion 31
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->

                def appName = "Quasi_Experimental"
                def date = new Date()
                def formattedDate = date.format('yyyy_MM_dd')

                def outputDir = new File("${project.buildDir.absolutePath}/outputs/apk/${variant.flavorName}/${variant.buildType.name}")
                //def outputFileName = "app-${variant.flavorName}-${variant.buildType.name}.apk"
                def outputFileName = "${appName}_${formattedDate}_${versionType}v${versionBuild}.apk"
                // def outputFile = new File("$outputDir/$outputFileName")
                variant.packageApplicationProvider.get().outputDirectory = new File("$outputDir")
                output.outputFileName = outputFileName
                /*  if (outputFileName != null && outputFileName.endsWith('.apk')) {
                      //output.outputFileName = outputFileName
                      output.outputFileName = new File("${project.buildDir.absolutePath}/outputs/apk/", "${outputDir}-${versionMajor}.${versionMinor}.${versionPatch}-${outputFileName}")
                  }*/
            }
        }

    } else {
        throw new GradleException("Could not read version.properties!")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            resValue("string", "DB_PASSWORD_quasi_experimental.db", "VaLu@b1ePeRcE!V3")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dependenciesInfo {
        includeInApk false
        includeInBundle false
    }
    buildToolsVersion '30.0.3'
}


dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation 'com.google.android.material:material:1.6.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation 'androidx.room:room-ktx:2.4.3'

//    // Added by Omar - Start
//    // Import the Firebase BoM
//    implementation platform('com.google.firebase:firebase-bom:31.0.1')
//
//    // When using the BoM, you don't specify versions in Firebase library dependencies
//
//    // Add the dependency for the Firebase SDK for Google Analytics
//    // For Analytics
//    implementation 'com.google.firebase:firebase-analytics'
//
//    // For Crashlytics
//    implementation 'com.google.firebase:firebase-crashlytics'
    // Added by Omar - End


    // Room
    def room_version = "2.4.3"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation 'com.wajahatkarim:roomexplorer:1.0.1'

    // RecyclerView
    implementation "androidx.recyclerview:recyclerview:1.2.1"

    // ShowCaseView
    implementation 'androidx.core:core-ktx:1.6.0'

    //GSON
    implementation 'com.google.code.gson:gson:2.8.7'

    //Ali mask
    implementation 'com.github.AliAzaz:Edittext-Library:2.0.0'
    implementation 'com.github.AliAzaz:AndroidValidatorCrawler:1.0.3'

    //Date
    implementation 'com.github.BlackBoxVision:datetimepicker-edittext:v0.4.0'
    implementation 'com.jakewharton.threetenabp:t' +
            'hreetenabp:1.3.1'

    // WorkManager
    def work_version = '2.5.0'
    implementation "androidx.work:work-runtime:$work_version"// WorkManager (Java only)
    implementation "androidx.work:work-runtime-ktx:$work_version" // WorkManager (Kotlin + coroutines)

    //Coroutine

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.1-native-mt"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1-native-mt"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.3"

    //ViewModel
    def androidx_lifecycle_version = '2.3.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.3.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.3.1"
    testImplementation 'android.arch.core:core-testing:1.1.1'

    //Glide
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    //MultiStateView
    implementation  'com.github.Kennyc1012:MultiStateView:2.1.2'

    //SDP
    implementation 'com.intuit.sdp:sdp-android:1.0.6'
    implementation 'com.intuit.ssp:ssp-android:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'

    //Permissions
    implementation 'com.guolindev.permissionx:permissionx:1.7.1'


    //Apache
    api 'org.apache.commons:commons-lang3:3.12.0'


    // Sqlcipher
    implementation "net.zetetic:android-database-sqlcipher:4.5.0"
    implementation "androidx.sqlite:sqlite-ktx:2.2.0"
    implementation "androidx.sqlite:sqlite:2.2.0"

    //Rooted
    implementation 'com.scottyab:rootbeer-lib:0.1.0'


    // Android Runtime Permissions
    implementation "com.github.permissions-dispatcher:permissionsdispatcher:4.9.1"
    annotationProcessor "com.github.permissions-dispatcher:permissionsdispatcher-processor:4.9.1"

    // Android Database Browser
    implementation 'com.github.amitshekhariitbhu.Android-Debug-Database:debug-db:v1.0.6'

}